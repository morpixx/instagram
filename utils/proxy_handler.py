from dataclasses import dataclass
from typing import Optional, Dict
import re

@dataclass
class Proxy:
    host: str
    port: int
    username: str
    password: str

    def as_selenium_proxy(self) -> Dict[str, Dict[str, str]]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–∫—Å—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è `undetected_chromedriver`.
        """
        return {
            'proxy': {
                'http': f'socks5://{self.username}:{self.password}@{self.host}:{self.port}',
                'https': f'socks5://{self.username}:{self.password}@{self.host}:{self.port}'
            }
        }

    def as_proxy_string(self, protocol: str = "socks5") -> str:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–∫—Å—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞, —è–∫–∏–π –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä `proxy` —É SeleniumBase.
        –î–æ–∑–≤–æ–ª—è—î –≤–∏–±—ñ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º `socks5`).
        """
        return f"{protocol}://{self.username}:{self.password}@{self.host}:{self.port}"

    def __repr__(self) -> str:
        return f"Proxy(host='{self.host}', port={self.port}, username='{self.username}', password='{self.password}')"


def parse_proxy_string(proxy_str: str) -> Optional[Proxy]:
    """
    –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–∫—Å—ñ-—Ä—è–¥–æ–∫, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏ –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∏:
    1. –û–¥–Ω–æ—Ä—è–¥–∫–æ–≤–∏–π: `45.135.232.137:24613:3c98c6:e9539f`
    2. –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏–π:
        Location: üá∫üá∏ United States, Denver
        Ping: 108
        Speed: 7.006993 Mbps
        IP: 45.135.232.137
        Port: 24613
        Username: 3c98c6
        Password: e9539f
    """

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤—Ö—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
    if not proxy_str or not isinstance(proxy_str, str):
        print("[–ü–û–ú–ò–õ–ö–ê] –ü–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å—ñ.")
        return None

    # –û–î–ù–û–†–Ø–î–ö–û–í–ò–ô –§–û–†–ú–ê–¢: IP:PORT:USERNAME:PASSWORD
    if re.match(r"^\d+\.\d+\.\d+\.\d+:\d+:.+:.+$", proxy_str):
        try:
            parts = proxy_str.split(":")
            if len(parts) != 4:
                raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ø—Ä–æ–∫—Å—ñ.")
            
            ip, port, username, password = parts
            return Proxy(ip, int(port), username, password)
        except ValueError as e:
            print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–∏–π –ø—Ä–æ–∫—Å—ñ: {e}")
            return None

    # –ë–ê–ì–ê–¢–û–†–Ø–î–ö–û–í–ò–ô –§–û–†–ú–ê–¢
    try:
        lines = [line.strip() for line in proxy_str.strip().split("\n") if line.strip()]

        ip = next((line.split(": ", 1)[1].strip() for line in lines if line.startswith("IP:")), None)
        port = next((int(line.split(": ", 1)[1].strip()) for line in lines if line.startswith("Port:")), None)
        username = next((line.split(": ", 1)[1].strip() for line in lines if line.startswith("Username:")), None)
        password = next((line.split(": ", 1)[1].strip() for line in lines if line.startswith("Password:")), None)

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ
        if not ip or not port or not username or not password:
            print("[–ü–û–ú–ò–õ–ö–ê] –ü—Ä–æ–∫—Å—ñ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ!")
            return None

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É IP
        if not re.match(r"^\d+\.\d+\.\d+\.\d+$", ip):
            print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç IP: {ip}")
            return None

        return Proxy(ip, port, username, password)

    except (ValueError, IndexError) as e:
        print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏–π –ø—Ä–æ–∫—Å—ñ: {e}")
        return None
